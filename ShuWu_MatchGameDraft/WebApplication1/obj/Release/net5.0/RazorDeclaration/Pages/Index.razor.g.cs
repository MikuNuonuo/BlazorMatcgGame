// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace WebApplication1.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "E:\6308\ShuWu_MatchGame\WebApplication1\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\6308\ShuWu_MatchGame\WebApplication1\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\6308\ShuWu_MatchGame\WebApplication1\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\6308\ShuWu_MatchGame\WebApplication1\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\6308\ShuWu_MatchGame\WebApplication1\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\6308\ShuWu_MatchGame\WebApplication1\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "E:\6308\ShuWu_MatchGame\WebApplication1\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\6308\ShuWu_MatchGame\WebApplication1\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "E:\6308\ShuWu_MatchGame\WebApplication1\_Imports.razor"
using WebApplication1;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "E:\6308\ShuWu_MatchGame\WebApplication1\_Imports.razor"
using WebApplication1.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\6308\ShuWu_MatchGame\WebApplication1\Pages\Index.razor"
using System.Timers;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/")]
    public partial class Index : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 115 "E:\6308\ShuWu_MatchGame\WebApplication1\Pages\Index.razor"
      
    List<string> animalEmoji = new List<string>()
    {
        "üê∞","üê∞",
        "üê∂","üê∂",
        "üê±", "üê±",
        "ü¶Ñ", "ü¶Ñ",
        "üêº","üêº",
        "üêî", "üêî",
        "üêß", "üêß",
        "üêØ", "üêØ"
    };

    List<string> shuffledAnimals = new List<string>();
    //player can clict button to pick up a time they like
    int buttonValue;
    int buttonNumber;
    int matchesFound = 0;
    Timer timer;
    int tenthsOfSecondElapsed = 0;
    //how much time remain
    string remainingTime;
    //player have how much time to play game
    int initialTime;
    //count how much time remaining
    float timeCount;
    float timeDisplay;

    //count player's score
    int score;
    //track the highest score in game
    int hScore = 0;
    int playerHScore;
    int currentScore;
    string playerHname = "";
    string hName = "";
    string name = "";
    string date = "";
    string hDate = "";
    string playerHdate = "";


    protected override void OnInitialized()
    {
        timer = new Timer(100);
        timer.Elapsed += Timer_Tick;
        SetUpGame();
        initialTime = 10;
        buttonValue = 10;
    }
    private void SetUpGame()
    {
        Random random = new Random();
        shuffledAnimals = animalEmoji
            .OrderBy(item => random.Next())
            .ToList();
        matchesFound = 0;
        tenthsOfSecondElapsed = 0;
        //reset player's score
        score = 0;
        buttonValue = 10;
        timeCount = 0;
    }

    string lastAnimalFound = string.Empty;
    string lastDescription = string.Empty;

    private void ButtonClick(string animal, string animalDescription)
    {
        if(lastAnimalFound == string.Empty)
        {
            lastAnimalFound = animal;
            lastDescription = animalDescription;
            timer.Start();
        }
        else if (lastAnimalFound == animal &&  lastDescription != animalDescription)
        {
            lastAnimalFound = string.Empty;

            shuffledAnimals = shuffledAnimals
                .Select(a => a.Replace(animal, string.Empty))
                .ToList();
            matchesFound++;
            //if match successfully, player will get 1 point
            score++;
            if(matchesFound == 8)
            {
                timer.Stop();
                remainingTime += " - You Win!";
                currentScore = score;
                CompareScore(currentScore, playerHScore);
                SetUpGame();
            }
        }
        else
        {
            lastAnimalFound = string.Empty;
            //if players select the incorrect animal, they will lose 1 point 
            score--;
        }
        //when score < 0, score will still is 0
        if (score < 0)
        {
            score = 0;
        }

    }

    private void Timer_Tick(Object source, ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {
            // assign buttonValue to initialTime, so that when play pick up a time, the Timer will change
            initialTime = buttonValue;
            tenthsOfSecondElapsed++;
            timeDisplay = tenthsOfSecondElapsed / 10f;
            remainingTime = (initialTime - timeDisplay).ToString("0,0s");
            timeCount= (initialTime - timeDisplay);
            StateHasChanged();

        });
        //if time become 0 and players not match all animals, they will lose
        if (timeCount == 0 && matchesFound != 8)
        {
            timer.Stop();
            remainingTime += " - You Lose!";
            currentScore = score;
            CompareScore(currentScore, playerHScore);
            SetUpGame();

        }
    }

    // achieve button value and display information
    private string DisplayVaulue = "";
    private void TimeButtonClick(string displayValue, int ButtonValue)
    {
        buttonValue =  ButtonValue;
        DisplayVaulue = displayValue;
    }

    //change players date
    private void UpdateDate(ChangeEventArgs e)
    {
        date = e.Value.ToString();
    }

    //change players name
    private void UpdateName(ChangeEventArgs e)
    {
        name = e.Value.ToString();
    }

    // compare new player score and highest history score
    private void CompareScore(int currentScore, int hScore)
    {
        if (currentScore < hScore)
        {
            playerHScore = hScore;
            playerHname = hName;
            playerHdate = hDate;
        }
        else
        {
            playerHScore = currentScore;
            playerHname = name;
            playerHdate = date;
        }
    }

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
