@page "/"
@using System.Timers;



<style>
    .container{
        width: 400px;
    }
#button1,#button2,#button3 {
        width: 60px;
        height: 60px;
        margin-left: 30px;
        background-color: orange;
    }

    button{
        width:100px;
        height: 100px;
    }

    h2{
       color:hotpink;
       font-weight:bold;
       font-size:22px;
    }
    h5{
        font-size:20px;
    }
    h3 {
        font-size: 18px;
        color:orchid;
    }

    h4 {
        font-size: 20px;
        font-weight: bold;
    }

    .memory-grid {
        display: grid;
        grid-template-columns: 100px 100px 100px 100px;
        background: hotpink;        
    }


</style>



<div class="container">
    <!--Task A&B, player can enter their information-->
    <!--enter name-->
    <div class="col-sm-6">
        Enter Name:
    </div>
    <div class="col-sm-6">
        <input type="text" placeholder="Enter your name"
               @onchange="UpdateName" />
    </div>

    <!--enter date-->
    <div class="col-sm-6"> Pick a date: </div>
    <div class="col-sm-6">
        <input type="date" @onchange="UpdateDate" />
    </div>

    <!--Task A&B player can pick up a time to complete game-->
    <!--players can click button to pick how much time they are given to complete the game-->
    <div class="textShow" id="timePlayShow">
        <h2>
            You have : <strong> @DisplayVaulue</strong> s to complete game!
        </h2>
    </div>
    <h4>Click a button to pick up a time: </h4>
    <div class="row ">
        <!--creat 3 buttons to show the informations-->
        <button type="button" class="btn btn-secondary" id="button1"
                @onclick="() => TimeButtonClick(20.ToString(),20)">
            <h5>20S</h5>
        </button>

        <button type="button" class="btn btn-secondary" id="button2"
                @onclick="() => TimeButtonClick(40.ToString(),40)">
            <h5>40S</h5>
        </button>

        <button type="button" class="btn btn-secondary" id="button3"
                @onclick="() => TimeButtonClick(60.ToString(),60)">
            <h5>60S</h5>
        </button>
    </div>
    <br />
    <!--highest score-->
    <div class="row">
        <h3><b>Highest Score:</b> @playerHScore  &nbsp;&nbsp; Player: @playerHname  &nbsp;&nbsp;   Date: @playerHdate</h3>
    </div>

    <!--using for loop to create match button-->
    <div class="row , memory-grid">
        @for (var animalNumber = 0; animalNumber < shuffledAnimals.Count; animalNumber++)
        {
            var animal = shuffledAnimals[animalNumber];
            var uniqueDescript = $"Button #{animalNumber}";
            var hidden = hiddenList[animalNumber];
            <!--get animalNumber-->
            var animalNumber2 = animalNumber;
    <div class="col-3, memory-grid">
        <button @onclick="@(() => ButtonClick(animal, uniqueDescript,animalNumber2))"
                type="button" class="btn btn-outline-dark">
            <!--use hidden property to hidden button -->
            <span hidden="@hidden"><h1>@animal</h1></span>
        </button>
    </div>}
    </div>
    <div class="row">
        <h4><b>Matches Found:</b> @matchesFound</h4>
    </div>
    <div class="row">
        <h4><b>Time:</b> @remainingTime </h4>
    </div>
    <!--show player's score'-->
    <div class="row">
        <h4><b>Score: </b> @score</h4>
    </div>

</div>

@code{


    /*********---------------------------------------------------Assignment summary in the end of code----------------------------------------------************/
    List<string> animalEmoji = new List<string>()
    {
        "🐰","🐰",
        "🐶","🐶",
        "🐱", "🐱",
        "🦄", "🦄",
        "🐼","🐼",
        "🐔", "🐔",
        "🐧", "🐧",
        "🐯", "🐯"
    };

    List<string> shuffledAnimals = new List<string>();
    // store the bool to control hidden property of span
    List<Boolean> hiddenList = new List<Boolean>();
    //player can clict button to pick up a time they like
    int buttonValue;
    int buttonNumber;
    int matchesFound = 0;
    Timer timer;
    int tenthsOfSecondElapsed = 0;
    //how much time remaining
    string remainingTime;
    //player have how much time to play game
    int initialTime;
    //count how much time remaining
    float timeCount;
    float timeDisplay;

    //count player's score
    int score;
    //track the highest score in game
    int hScore = 0;
    int playerHScore;
    int currentScore;
    string playerHname = "";
    string hName = "";
    string name = "";
    string date = "";
    string hDate = "";
    string playerHdate = "";
    //record last animal number
    int lastAnimalNumber = -1;
    // record current last animal number
    int lastLastAnimalNumber = -1;
    // use state to record current state
    int state = 0;


    protected override void OnInitialized()
    {
        timer = new Timer(100);
        timer.Elapsed += Timer_Tick;
        SetUpGame();
        initialTime = 10;
        buttonValue = 10;

    }
    private void SetUpGame()
    {
        Random random = new Random();
        shuffledAnimals = animalEmoji
            .OrderBy(item => random.Next())
            .ToList();
        //hiden all button in the beginning
        for (int i = 0; i < 16; i++) {
            hiddenList.Add(true);
        }
        matchesFound = 0;
        tenthsOfSecondElapsed = 0;
        //reset player's score
        score = 0;
        buttonValue = 10;
        timeCount = 0;

    }

    string lastAnimalFound = string.Empty;
    string lastDescription = string.Empty;

    private void ButtonClick(string animal, string animalDescription, int animalNumber)
    {   //if players select the incorrect animal, will hidden button again
        if (state == 3) {
            hiddenList[lastAnimalNumber] = true;
            hiddenList[lastLastAnimalNumber] = true;
        }
        hiddenList[animalNumber] = false;
        if (lastAnimalFound == string.Empty)
        {
            lastAnimalFound = animal;
            lastDescription = animalDescription;
            timer.Start();
            //record last number of animal
            lastAnimalNumber = animalNumber;
            state = 1;
        }
        else if (lastAnimalFound == animal &&  lastDescription != animalDescription)
        {
            lastAnimalFound = string.Empty;
            matchesFound++;


            //if match successfully, player will get 1 point, Task A&C 
            score++;
            if(matchesFound == 8)
            {
                timer.Stop();
                remainingTime += " - You Win!";
                currentScore = score;
                CompareScore(currentScore, playerHScore);
                //make sure highest name and date will remain after setupgame, Task A&C
                hName = playerHname;
                hDate = playerHdate;
                SetUpGame();
                for (int i = 0; i < hiddenList.Count; i++) {
                    hiddenList[i] = true;
                }
            }
            //use LastlastAnimalNumber to store lastAnimalnumber 
            lastLastAnimalNumber = lastAnimalNumber;
            //record last number of animal
            lastAnimalNumber = animalNumber;
            state = 2;
        }
        else
        {
            lastLastAnimalNumber = lastAnimalNumber;
            //record last number of animal
            lastAnimalNumber = animalNumber;
            lastAnimalFound = string.Empty;
            //if players select the incorrect animal, they will lose 1 point 
            score--;
            state = 3;
        }
        //when score < 0, score will still is 0, Task A&C 
        if (score < 0)
        {
            score = 0;
        }

    }

    private void Timer_Tick(Object source, ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {
            // assign buttonValue to initialTime, so that when play pick up a time, the Timer will change, Task A&B
            initialTime = buttonValue;
            tenthsOfSecondElapsed++;
            timeDisplay = tenthsOfSecondElapsed / 10f;
            remainingTime = (initialTime - timeDisplay).ToString("0,0s");
            timeCount= (initialTime - timeDisplay);
            StateHasChanged();

        });
        //if time become 0 and players not match all animals, they will lose, Task A&C 
        if (timeCount == 0 && matchesFound != 8)
        {
            timer.Stop();
            remainingTime += " - You Lose!";
            currentScore = score;
            CompareScore(currentScore, playerHScore);
            //make sure highest name and date will remain after setupgame, Task A&C 
            hName = playerHname;
            hDate = playerHdate;
            SetUpGame();

        }
    }

    // achieve button value and display information, Task A&B
    private string DisplayVaulue = "";
    private void TimeButtonClick(string displayValue, int ButtonValue)
    {
        buttonValue =  ButtonValue;
        DisplayVaulue = displayValue;
    }

    //change players date, Task A&B
    private void UpdateDate(ChangeEventArgs e)
    {
        date = e.Value.ToString();
    }

    //change players name, Task A&B
    private void UpdateName(ChangeEventArgs e)
    {
        name = e.Value.ToString();
    }

    // compare new player score and highest history score, Task A&C 
    private void CompareScore(int currentScore, int hScore)
    {
        if (currentScore < hScore)
        {
            playerHScore = hScore;
            playerHname = hName;
            playerHdate = hDate;
        }
        else
        {
            playerHScore = currentScore;
            playerHname = name;
            playerHdate = date;
        }
    }

    /*****
     ------------------------------------------------------------------Assignment summary ---------------------------------------------------------------------

        [🌟New] Change the game to be more like traditional "memory" or "concentration" -- i.e., the images for all 16 buttons are the same and the player only sees the "shuffled animal" image after they click on a button (requirement C, possibly B)
     state: Finish
         1. use hidden property of span to hide buttons
         2. create animalNumber2 to store current animalnumber
         3. create lastAnimalNumber and lastLastAnimalNumber to record the last animal number and new last animal number
         4. use state to record current state, state 1:start game, 2: match successfully 3: fail to match
         5. create a bool list "hidden" to record the bool of the current animal number, the default of all bool are true. When the game begins, 
         the last button player clicks will become false, so we can see it. when state = 3(fail to match), the bool of last and lastlast animal 
         of hidden list will become true, so they will be hide again;


    ----------------------------------------------------------last week work-------------------------------------------------------         Make the game timer count down instead of up. If the timer reaches 0 before all matches are made, the player loses (Task A & B)
     state: Finish
         1. create an int initialTime, which store players have how much time to play game
         2. create a string remainingTime to show the text of how much time remains, and assign it to page, so player can see it
         3. create a int timeCount to count players have how much time remain now
         4. change the value type of timeDisplay from string to int
         5. timeCount= (initialTime - timeDisplay)
         6. reset timeCount to 0 in the SetUpGame, so when player reset the game, time will reset again


         Change the game so that the player scores 1 point for every correct match and loses 1 point for every wrong match (Task A & C)
     state: Finish
         1. create an int score to store player's score
         2. when player match a pair of animal ( lastAnimalFound == animal &&  lastDescription != animalDescription), socre ++
         3. when player make a mistake to match a pair of animals ( lastAnimalFound = string.Empty;), score--
         4. we need to make sure the score does not become negative, so I use if statement to fix it that when score <0, score = 0;
         5. reset score = 0 in SetUpGame and OnInitialized



         Add a variable to keep track of the game's high score to complete all matches and show the player's name and date（Task A & B & C）
      state: Finish
         1. int hScore to store player's highest score in the history 
         2. int current score to store the score in current  game 
         3. int playerHScore to store new highest score
         4. use string playerHname = ""; string playerHdate = ""; to show the text information of the new highest score player on page
         5. use string date = ""; string name = ""  to store current player's information
         6. string hDate = "";  string hName = ""; to store pass higheset player's information 
         7. use function CompareScore to compare new player score and highest history score, if currentscore >= hscore,  playerHScore = currentscore, so we can update the new score 
         8. when player win or lose game, update currentScore = score and use function CompareScore to compare scores


         Let the user pick how much time they are given to complete the game (requirements A and B)
     state: Finish
         1. create 3 buttons on page, so players can click button to pick up a time they like
         2. create an int buttunValue to store button's value
         3. create an int buttunNumber to show the button's number
         4. create a function TimeButtonClick, use this to achieve button value and display information, and assign value to each button
         5. in Timer_Tick function, assign buttonValue to initialTime, so when player pick up a button, the game remaning time will become the buttonValue  
         6. give a defaut value buttonValue = 10, When player SetUpGame or Initialize game. So if player don't pick up a button, default remaindingtime will become 10s 

     *****/
}


